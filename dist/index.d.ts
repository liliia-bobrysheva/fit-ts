// Generated by dts-bundle-generator v9.5.1

import { Buffer } from 'buffer';

export type MessageIndex = 0 | "mask" | "reserved" | "selected";
export type DisplayMeasure = "metric" | "statute" | "nautical";
export type SportType = "generic" | "running" | "cycling" | "transition" | "fitness_equipment" | "swimming" | "basketball" | "soccer" | "tennis" | "american_football" | "training" | "walking" | "cross_country_skiing" | "alpine_skiing" | "snowboarding" | "rowing" | "mountaineering" | "hiking" | "multisport" | "paddling" | "flying" | "e_biking" | "motorcycling" | "boating" | "driving" | "golf" | "hang_gliding" | "horseback_riding" | "hunting" | "fishing" | "inline_skating" | "rock_climbing" | "sailing" | "ice_skating" | "sky_diving" | "snowshoeing" | "snowmobiling" | "stand_up_paddleboarding" | "surfing" | "wakeboarding" | "water_skiing" | "kayaking" | "rafting" | "windsurfing" | "kitesurfing" | "tactical" | "jumpmaster" | "boxing" | "floor_climbing" | "diving" | "all";
export type SubSport = "generic" | "treadmill" | "street" | "trail" | "track" | "spin" | "indoor_cycling" | "road" | "mountain" | "downhill" | "recumbent" | "cyclocross" | "hand_cycling" | "track_cycling" | "indoor_rowing" | "elliptical" | "stair_climbing" | "lap_swimming" | "open_water" | "flexibility_training" | "strength_training" | "warm_up" | "match" | "exercise" | "challenge" | "indoor_skiing" | "cardio_training" | "indoor_walking" | "e_bike_fitness" | "bmx" | "casual_walking" | "speed_walking" | "bike_to_run_transition" | "run_to_bike_transition" | "swim_to_bike_transition" | "atv" | "motocross" | "backcountry" | "resort" | "rc_drone" | "wingsuit" | "whitewater" | "skate_skiing" | "yoga" | "pilates" | "indoor_running" | "gravel_cycling" | "e_bike_mountain" | "commuting" | "mixed_surface" | "navigate" | "track_me" | "map" | "single_gas_diving" | "multi_gas_diving" | "gauge_diving" | "apnea_diving" | "apnea_hunting" | "virtual_activity" | "obstacle" | "all";
export type SessionTrigger = "activity_end" | "manual" | "auto_multi_sport" | "fitness_equipment";
export type LapTrigger = "manual" | "time" | "distance" | "position_start" | "position_lap" | "position_waypoint" | "position_marked" | "session_end" | "fitness_equipment";
export type EventName = "timer" | "workout" | "workout_step" | "power_down" | "power_up" | "off_course" | "session" | "lap" | "course_point" | "battery" | "virtual_partner_pace" | "hr_high_alert" | "hr_low_alert" | "speed_high_alert" | "speed_low_alert" | "cad_high_alert" | "cad_low_alert" | "power_high_alert" | "power_low_alert" | "recovery_hr" | "battery_low" | "time_duration_alert" | "distance_duration_alert" | "calorie_duration_alert" | "activity" | "fitness_equipment" | "length" | "user_marker" | "sport_point" | "calibration" | "front_gear_change" | "rear_gear_change" | "rider_position_change" | "elev_high_alert" | "elev_low_alert" | "comm_timeout";
export type EventType = "start" | "stop" | "consecutive_depreciated" | "marker" | "stop_all" | "begin_depreciated" | "end_depreciated" | "end_all_depreciated" | "stop_disable" | "stop_disable_all";
export type Manufacturer = 0 | "garmin" | "garmin_fr405_antfs" | "zephyr" | "dayton" | "idt" | "srm" | "quarq" | "ibike" | "saris" | "spark_hk" | "tanita" | "echowell" | "dynastream_oem" | "nautilus" | "dynastream" | "timex" | "metrigear" | "xelic" | "beurer" | "cardiosport" | "a_and_d" | "hmm" | "suunto" | "thita_elektronik" | "gpulse" | "clean_mobile" | "pedal_brain" | "peaksware" | "saxonar" | "lemond_fitness" | "dexcom" | "wahoo_fitness" | "octane_fitness" | "archinoetics" | "the_hurt_box" | "citizen_systems" | "magellan" | "osynce" | "holux" | "concept2" | "one_giant_leap" | "ace_sensor" | "brim_brothers" | "xplova" | "perception_digital" | "bf1systems" | "pioneer" | "spantec" | "metalogics" | "4iiiis" | "seiko_epson" | "seiko_epson_oem" | "ifor_powell" | "maxwell_guider" | "star_trac" | "breakaway" | "alatech_technology_ltd" | "mio_technology_europe" | "rotor" | "geonaute" | "id_bike" | "specialized" | "wtek" | "physical_enterprises" | "north_pole_engineering" | "bkool" | "cateye" | "stages_cycling" | "sigmasport" | "tomtom" | "peripedal" | "wattbike" | "moxy" | "ciclosport" | "powerbahn" | "acorn_projects_aps" | "lifebeam" | "bontrager" | "wellgo" | "scosche" | "magura" | "woodway" | "elite" | "nielsen_kellerman" | "dk_city" | "tacx" | "direction_technology" | "magtonic" | "1partcarbon" | "inside_ride_technologies" | "sound_of_motion" | "stryd" | "icg" | "mipulse" | "bsx_athletics" | "look" | "campagnolo_srl" | "body_bike_smart" | "praxisworks" | "limits_technology" | "topaction_technology" | "cosinuss" | "fitcare" | "magene" | "giant_manufacturing_co" | "tigrasport" | "salutron" | "technogym" | "bryton_sensors" | "latitude_limited" | "soaring_technology" | "igpsport" | "thinkrider" | "gopher_sport" | "waterrower" | "orangetheory" | "inpeak" | "kinetic" | "johnson_health_tech" | "polar_electro" | "seesense" | "nci_technology" | "development" | "healthandlife" | "lezyne" | "scribe_labs" | "zwift" | "watteam" | "recon" | "favero_electronics" | "dynovelo" | "strava" | "precor" | "bryton" | "sram" | "navman" | "cobi" | "spivi" | "mio_magellan" | "evesports" | "sensitivus_gauge" | "podoon" | "life_time_fitness" | "falco_e_motors" | "minoura" | "cycliq" | "luxottica" | "trainer_road" | "the_sufferfest" | "fullspeedahead" | "virtualtraining" | "feedbacksports" | "omata" | "vdo" | "magneticdays" | "hammerhead" | "kinetic_by_kurt" | "shapelog" | "dabuziduo" | "jetblack" | "coros" | "virtugo" | "velosense" | "actigraphcorp";
export type ANTPlusDeviceType = 0 | "antfs" | "bike_power" | "environment_sensor_legacy" | "multi_sport_speed_distance" | "control" | "fitness_equipment" | "blood_pressure" | "geocache_node" | "light_electric_vehicle" | "env_sensor" | "racquet" | "control_hub" | "muscle_oxygen" | "bike_light_main" | "bike_light_shared" | "exd" | "bike_radar" | "weight_scale" | "heart_rate" | "bike_speed_cadence" | "bike_cadence" | "bike_speed" | "stride_speed_distance";
export type ANTNetwork = "public" | "antplus" | "antfs" | "private";
export type BatteryStatus = 0 | "new" | "good" | "ok" | "low" | "critical" | "charging" | "unknown";
export type SwimStroke = "freestyle" | "backstroke" | "breaststroke" | "butterfly" | "drill" | "mixed" | "im";
export type LeftRightBalance100 = 0 | "mask" | "right";
export type BodyLocation = "left_leg" | "left_calf" | "left_shin" | "left_hamstring" | "left_quad" | "left_glute" | "right_leg" | "right_calf" | "right_shin" | "right_hamstring" | "right_quad" | "right_glute" | "torso_back" | "left_lower_back" | "left_upper_back" | "right_lower_back" | "right_upper_back" | "torso_front" | "left_abdomen" | "left_chest" | "right_abdomen" | "right_chest" | "left_arm" | "left_shoulder" | "left_bicep" | "left_tricep" | "left_brachioradialis" | "left_forearm_extensors" | "right_arm" | "right_shoulder" | "right_bicep" | "right_tricep" | "right_brachioradialis" | "right_forearm_extensors" | "neck" | "throat" | "waist_mid_back" | "waist_front" | "waist_left" | "waist_right";
export type SourceType = "ant" | "antplus" | "bluetooth" | "bluetooth_low_energy" | "wifi" | "local";
export interface DeveloperDataId {
	developer_id?: number;
	application_id?: number[];
	manufacturer_id?: Manufacturer;
	developer_data_index: number;
	application_version?: number;
}
export interface Device {
	timestamp: Date;
	device_index: number;
	device_type: ANTPlusDeviceType;
	manufacturer: Manufacturer;
	source_type?: SourceType;
	serial_number?: number;
	product?: number;
	software_version?: number;
	hardware_version?: number;
	cum_operating_time?: number;
	battery_voltage?: number;
	battery_status?: BatteryStatus;
	sensor_position?: BodyLocation;
	descriptor?: string;
	ant_transmission_type?: number;
	ant_device_number?: number;
	ant_network?: ANTNetwork;
	product_name?: string;
}
export interface FieldDescription {
	developer_data_index: number;
	field_definition_number: number;
	fit_base_type_id: number;
	field_name: string;
	units: string;
	scale?: number | null;
	offset?: number | null;
	native_field_num?: number;
}
export interface FitEvent {
	timestamp: Date;
	event: EventName;
	event_type: EventType;
	data: number;
	data16?: number;
	event_group?: number;
	score?: number;
	opponent_score?: number;
	front_gear_num?: number;
	front_gear?: number;
	rear_gear_num?: number;
	rear_gear?: number;
	device_index?: number;
}
export interface HRV {
	time: number[];
}
export interface Lap {
	message_index?: MessageIndex;
	event?: string;
	event_type?: string;
	timestamp?: Date;
	start_time: Date;
	total_elapsed_time?: number;
	total_timer_time?: number;
	avg_speed?: number;
	max_speed?: number;
	total_distance?: number;
	avg_cadence?: number;
	max_cadence?: number;
	avg_power?: number;
	max_power?: number;
	time_in_power_zone?: number[];
	total_work?: number;
	min_altitude?: number;
	avg_altitude?: number;
	max_altitude?: number;
	max_neg_grade?: number;
	avg_grade?: number;
	max_pos_grade?: number;
	total_calories?: number;
	normalized_power?: number;
	avg_temperature?: number;
	max_temperature?: number;
	total_ascent?: number;
	total_descent?: number;
	sport?: string;
	sub_sport?: string;
	start_position_lat?: number;
	start_position_long?: number;
	total_cycles?: number;
	total_fat_calories?: number;
	avg_heart_rate?: number;
	max_heart_rate?: number;
	event_group?: number;
	lap_trigger?: LapTrigger;
	left_right_balance?: LeftRightBalance100;
	avg_stroke_distance?: number;
	swim_stroke?: SwimStroke;
	num_active_lengths?: number;
	gps_accuracy?: number;
	avg_pos_grade?: number;
	avg_neg_grade?: number;
	total_moving_time?: number;
	avg_pos_vertical_speed?: number;
	avg_neg_vertical_speed?: number;
	max_pos_vertical_speed?: number;
	max_neg_vertical_speed?: number;
	min_heart_rate?: number;
	time_in_hr_zone?: number[];
	time_in_speed_zone?: number[];
	time_in_cadence_zone?: number[];
	player_score?: number;
	opponent_score?: number;
	stroke_count?: number;
	zone_count?: number;
	avg_vertical_oscillation?: number;
	avg_stance_time_percent?: number;
	avg_stance_time?: number;
	avg_fractional_cadence?: number;
	max_fractional_cadence?: number;
	total_fractional_cycles?: number;
	avg_total_hemoglobin_conc?: number;
	min_total_hemoglobin_conc?: number;
	max_total_hemoglobin_conc?: number;
	avg_saturated_hemoglobin_percent?: number;
	min_saturated_hemoglobin_percent?: number;
	max_saturated_hemoglobin_percent?: number;
	avg_left_torque_effectiveness?: number;
	avg_right_torque_effectiveness?: number;
	avg_left_pedal_smoothness?: number;
	avg_right_pedal_smoothness?: number;
	avg_combined_pedal_smoothness?: number;
	time_standing?: number;
	stand_count?: number;
	avg_left_pco?: number;
	avg_right_pco?: number;
	avg_left_power_phase?: number;
	avg_left_power_phase_peak?: number;
	avg_right_power_phase?: number;
	avg_right_power_phase_peak?: number;
	avg_power_position?: number;
	max_power_position?: number;
	avg_cadence_position?: number;
	max_cadence_position?: number;
	enhanced_avg_speed?: number;
	enhanced_max_speed?: number;
	enhanced_avg_altitude?: number;
	enhanced_min_altitude?: number;
	enhanced_max_altitude?: number;
	avg_lev_motor_power?: number;
	max_lev_motor_power?: number;
	lev_battery_consumption?: number;
	avg_vertical_ratio?: number;
	avg_stance_time_balance?: number;
	avg_step_length?: number;
	avg_vam?: number;
}
export interface Session {
	message_index?: MessageIndex;
	laps?: Lap[];
	event?: string;
	event_type?: string;
	timestamp?: Date;
	start_time: Date;
	total_elapsed_time?: number;
	total_timer_time?: number;
	avg_speed?: number;
	max_speed?: number;
	total_distance?: number;
	avg_cadence?: number;
	max_cadence?: number;
	avg_power?: number;
	max_power?: number;
	time_in_power_zone?: number[];
	total_work?: number;
	min_altitude?: number;
	avg_altitude?: number;
	max_altitude?: number;
	max_neg_grade?: number;
	avg_grade?: number;
	max_pos_grade?: number;
	total_calories?: number;
	normalized_power?: number;
	avg_temperature?: number;
	max_temperature?: number;
	total_ascent?: number;
	total_descent?: number;
	sport?: string;
	sub_sport?: string;
	num_laps?: number;
	threshold_power?: number;
	training_stress_score?: number;
	intensity_factor?: number;
	workout_type?: number;
	start_position_lat?: number;
	start_position_long?: number;
	total_cycles?: number;
	total_fat_calories?: number;
	avg_heart_rate?: number;
	max_heart_rate?: number;
	total_training_effect?: number;
	first_lap_index?: number;
	event_group?: number;
	trigger?: SessionTrigger;
	nec_lat?: number;
	nec_long?: number;
	swc_lat?: number;
	swc_long?: number;
	left_right_balance_100?: LeftRightBalance100;
	avg_stroke_count?: number;
	avg_stroke_distance?: number;
	swim_stroke?: SwimStroke;
	pool_length?: number;
	pool_length_unit?: DisplayMeasure;
	num_active_lengths?: number;
	gps_accuracy?: number;
	avg_pos_grade?: number;
	avg_neg_grade?: number;
	total_moving_time?: number;
	avg_pos_vertical_speed?: number;
	avg_neg_vertical_speed?: number;
	max_pos_vertical_speed?: number;
	max_neg_vertical_speed?: number;
	min_heart_rate?: number;
	time_in_hr_zone?: number[];
	time_in_speed_zone?: number[];
	time_in_cadence_zone?: number[];
	avg_lap_time?: number;
	best_lap_index?: number;
	player_score?: number;
	opponent_score?: number;
	opponent_name?: string;
	stroke_count?: number;
	zone_count?: number;
	max_ball_speed?: number;
	avg_ball_speed?: number;
	avg_vertical_oscillation?: number;
	avg_stance_time_percent?: number;
	avg_stance_time?: number;
	avg_fractional_cadence?: number;
	max_fractional_cadence?: number;
	total_fractional_cycles?: number;
	avg_total_hemoglobin_conc?: number;
	min_total_hemoglobin_conc?: number;
	max_total_hemoglobin_conc?: number;
	avg_saturated_hemoglobin_percent?: number;
	min_saturated_hemoglobin_percent?: number;
	max_saturated_hemoglobin_percent?: number;
	avg_left_torque_effectiveness?: number;
	avg_right_torque_effectiveness?: number;
	avg_left_pedal_smoothness?: number;
	avg_right_pedal_smoothness?: number;
	avg_combined_pedal_smoothness?: number;
	sport_index?: number;
	time_standing?: number;
	stand_count?: number;
	avg_left_pco?: number;
	avg_right_pco?: number;
	avg_left_power_phase?: number;
	avg_left_power_phase_peak?: number;
	avg_right_power_phase?: number;
	avg_right_power_phase_peak?: number;
	avg_power_position?: number;
	max_power_position?: number;
	avg_cadence_position?: number;
	max_cadence_position?: number;
	enhanced_avg_speed?: number;
	enhanced_max_speed?: number;
	enhanced_avg_altitude?: number;
	enhanced_min_altitude?: number;
	enhanced_max_altitude?: number;
	avg_lev_motor_power?: number;
	max_lev_motor_power?: number;
	lev_battery_consumption?: number;
	avg_vertical_ratio?: number;
	avg_stance_time_balance?: number;
	avg_step_length?: number;
	total_anaerobic_effect?: number;
	avg_vam?: number;
}
export interface Sport {
	sport?: SportType;
	sub_sport?: SubSport;
	name?: string;
}
export type SpeedUnit = "m/s" | "mph" | "km/h";
export type LengthUnit = "m" | "mi" | "km";
export type TemperatureUnit = "celsius" | "kelvin" | "fahrenheit";
export type PressureUnit = "cbar" | "bar" | "psi";
export type ParserMode = "cascade" | "list" | "both";
export interface ParserOptions {
	force: boolean;
	speedUnit: SpeedUnit;
	lengthUnit: LengthUnit;
	temperatureUnit: TemperatureUnit;
	elapsedRecordField: boolean;
	pressureUnit: PressureUnit;
	mode: ParserMode;
}
export interface FITObject {
	protocolVersion: number;
	profileVersion: number;
	software?: any;
	activity?: Activity;
	[key: string]: any;
}
export interface Activity {
	sessions?: Session[];
	events?: FitEvent[];
	hrv?: HRV[];
	device_infos?: Device[];
	developer_data_ids?: DeveloperDataId[];
	field_descriptions?: FieldDescription[];
	sports?: Sport[];
}
export type FitParserCallback = (error: string | null, data: FITObject | {}) => void;
declare class FitParser {
	options: ParserOptions;
	constructor(options?: Partial<ParserOptions>);
	parse(content: Buffer, callback: FitParserCallback): void;
}

export {
	FitParser as default,
};

export {};
